#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');
var debug = require('debug')('trafficmapserver:server');
var http = require('http');
var config = require('../configuration');
var serverConfig = config.ServerConfig

if (cluster.isMaster) {
    console.log(`Master ${process.pid} is running`);

    // Count the machine's CPUs
    var cpuCount = require('os').cpus().length;
    if (serverConfig.NumWorkers != 0) {
        cpuCount = serverConfig.NumWorkers;
    }

    // Create a worker for each CPU
    for (var counter = 0; counter < cpuCount; counter++) {
        cluster.fork();
    }

    // Listen for dying workers
    cluster.on('exit', function() {
        console.log(`Worker died`);
        console.log(`Starting a new worker`);
        cluster.fork();
    });

    // Listen for online workers
    cluster.on('online', function(worker) {
        console.log(`Worker ${worker.process.pid} is online`);
    });
} else {
    console.log(`Worker ${process.pid} started`);

    /**
     * Get port from environment and store in Express.
     */
    var app = require('../app');
    var port = normalizePort(serverConfig.Port);
    app.set('port', port);

    /**
     * Create HTTP server.
     */
    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port
                                        : 'Port ' + port;

// handle specific listen errors with friendly messages
switch (error.code) {
    case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
    case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
    default:
            throw error;
}
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr
                                        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

        return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port
                                        : 'Port ' + port;

// handle specific listen errors with friendly messages
switch (error.code) {
    case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
    case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
    default:
            throw error;
}
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


